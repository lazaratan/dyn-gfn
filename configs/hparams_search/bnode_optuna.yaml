# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/mse"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 25

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 200

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 25 # number of random sampling runs before optimization starts

    # define range of hyperparameters
    search_space:
      model.lr:
        type: float
        low: 0.00001
        high: 0.2
        log: true

      model.l2_reg:
        type: float
        low: 0
        high: 0.0

      model.l1_reg:
        type: float
        low: 0
        high: 0.0

      model.kl_reg:
        type: float
        low: 0.0001
        high: 0.1

      model.prior_var:
        type: float
        low: 0.00001
        high: 1.0

      model.init_log_var:
        type: float
        low: -10
        high: -1

      model.de_reg:
        type: float
        low: 0.0
        high: 0.0

      model.n_ens:
        type: int
        low: 0
        high: 0

      model.proximal_lambda:
        type: float
        low: 0.00001
        high: 0.01

      model.gamma:
        type: float
        low: 0.99
        high: 0.999
